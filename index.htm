<html>
<head>
<style>
canvas {
    border:1px solid #d3d3d3;
    background-color: #f1f1f1;
}
</style>
<title></title>
</head>
<body>
 
<script>
//Globals
var body = 0;
var head = 0;
var lower = 0;
var CHARACTER_CREATION = 1;
var GRASS = 0;
var GRASS_TACTICAL = 1;
var ARROW_LEFT = 0;
var ARROW_RIGHT = 1;
var SCREEN_WIDTH = 1200;
var SCREEN_HEIGHT = 700;
var active_map_piece = new Array();
var tile_array = new Array();
var axe_img = new Image();

axe_img.src = "./images/parts/weapons/axe.png";
var ui_elements = new Array()
ui_elements[0] = new Image();
ui_elements[0].src = "./images/ui_elements/arrow_left.png";
ui_elements[1] = new Image();
ui_elements[1].src = "./images/ui_elements/arrow_right.png";
var orc_body = new Array();
var orc_lower = new Array();
var orc_head = new Array();
orc_body[0] = new Image();
orc_body[0].src = "./images/parts/orc_body.png";
orc_lower[0] = new Image();
orc_lower[0].src = "./images/parts/orc_legs.png";
orc_lower[1] = new Image();
orc_lower[1].src = "./images/parts/orc_legs_tunic.png";
orc_head[0] = new Image();
orc_head[0].src = "./images/parts/orc_hair.png";
tile_array[0] = new Image();
tile_array[0].src = "./images/tiles/grass_tile.png";
tile_array[1] = new Image();
tile_array[1].src = "./images/tiles/grass_tile_tactical.png";
var curr_map_array = new Array();
var OVER_WORLD = 0;

function person_build(top_part,bottom_part,head,x,y,weapon)
{
	this.bottom_offset = bottom_part.height;
	this.bottom = bottom_part;
	this.head = head;
	this.x = x;
	this.y = y;
	this.weapon = weapon;
	this.top = top_part;
	this.move_piece = function(x_mov,y_mov)
	{
		this.bottom.x = x_mov;
		this.top.x = x_mov;
		this.bottom.y = y_mov + this.bottom_offset;
		this.top.y = y_mov;
		this.weapon.x = x_mov + this.weapon.width/1.8;
		this.weapon.y = y_mov - this.weapon.height/10;
		this.head.x = x_mov - this.head.width/3;
		this.head.y = y_mov - this.head.height/6;
	}
	this.update = function()
	{
		this.weapon.update();
		this.top.update();
		this.bottom.update();
		this.head.update();
	}
}

function new_player(player_build,x,y)
{
		this.x = x;
		this.y = y;
		this.build = player_build;
}

var player;

function weapon(pixel_offset,core)
{
	this.core = core;
	this.off_set = pixel_offset;
}

function create_player(weapon,width,height)
{
	var axe = new component(width,height,0,0,0,axe_img,0)
	var player_top = new component(width,height,0,0,0,orc_body[body],0);
	var player_bottom = new component(width,height,0,0,0,orc_lower[lower],0);
	var player_head = new component(width,height,0,0,0,orc_head[head],0)
	var build_player = new person_build(player_top,player_bottom,player_head,1,1,axe);
	player = new new_player(build_player,1,1); // Find Coordinates of both objects. Determine distance between each.( Distance Formula). Determine direction, (Tan theta). Determine coordinates surrounding points. Draw line to original point. if hit surrounding points :D
}

function tile(x,y,type)
{
		this.x = x;
		this.y = y;
		this.type = tile_array[type];
}

function map(width,height)
{
	this.width = width;
	this.height = height;
	this.tiles = new Array();
	var y = 1;
	var x = 1;
	for(i = 0; y <= height;i++)
	{
		var has_vil = false;
		if((Math.floor(Math.random() * 1) + 6) == 6)
		{
				has_vil = true;
		}
		this.tiles[i] = new tile(x,y,GRASS);
		if(x == width)
		{
			y++;
			x = 0;
		}
		x++;
	}
}

function draw_map(mtd)
{
	active_map_piece = [];
	for(i = 0; i < mtd.tiles.length; i++)
	{
		var x_val = mtd.tiles[i].x * 64 - 64;
		var y_val = mtd.tiles[i].y * 64 - 64;
		active_map_piece[i] = new component(64,64,0,x_val,y_val,tile_array[GRASS],0)
	}
}

/*
function draw_map(mtd)
{
	active_map_piece = [];
	for(i = 0; i < mtd.tiles.length; i++)
	{
		var x_val = mtd.tiles[i].x * 21 - 21;
		var y_val = mtd.tiles[i].y * 21 - 21;
		active_map_piece[i] = new component(21,21,0,x_val,y_val,tile_array[GRASS_TACTICAL],0) //USE TO DRAW THE TACTICAL MAPE TILES
	}
}
*/

var mode = 0;
var TICK_SPEED = 1;
var ticks = 0;
var active_components = new Array()
//X and Y are for positioning the original arrow. Rows is for how many arrow pairs are generated. Seperation is how far from the leftside arrow the rightside one is
function arrow_group(x,y,rows,x_seperation,y_seperation)
{
	this.x = x;
	this.y = y;
	this.arrows = new Array();
	var left = true;
	var curr_y = 0;
	var curr_x = 0;
	for(i = 0;curr_y < rows;i++)
	{
			var offset = 0;
			if(i != 0)
			{
				offset = y_seperation * curr_y;
			}
		if(left)
		{

			this.arrows[i] = new component(128,128,0,this.x,this.y + offset,ui_elements[ARROW_LEFT],0);
			left = false;
		}
		else
		{
			left = true;
			this.arrows[i] = new component(128,128,0,this.x + x_seperation,this.y + offset,ui_elements[ARROW_RIGHT],0);
			curr_y++;
		}
	}
}

function component(width, height, color, x, y,sprite,speed) {
    this.width = width;
    this.height = height;
	this.speed = speed;
    this.x = x;
    this.y = y; 
	this.imagge = sprite;
    ctx = myGameArea.context;
	if(color != 0)
	{
    ctx.fillStyle = color;
    ctx.fillRect(this.x, this.y, this.width, this.height);
	}
    this.update = function(){
        ctx = myGameArea.context;
       // ctx.fillStyle = color;
        //ctx.fillRect(this.x, this.y, this.width, this.height);
		ctx.drawImage(this.imagge,this.x,this.y,this.width,this.height);

    }
		this.move_piece = function(x_change,y_change)
	{
		this.x += x_change;
		this.y += y_change;
	}
		
}
var myGamePiece = new Array();
var mode = OVER_WORLD;
var last_press = 0;
var arrows;
function updateGameArea() 
{
	ticks += 5;
	if(mode == OVER_WORLD)
	{
		if(last_press + 100 < ticks)
		{
			if (myGameArea.keys && myGameArea.keys[37] || myGameArea.keys && myGameArea.keys[65])  {player.x--} //LEFT/A
			if (myGameArea.keys && myGameArea.keys[39] || myGameArea.keys && myGameArea.keys[68]){player.x++} //RIGHT/D
			if (myGameArea.keys && myGameArea.keys[38] || myGameArea.keys && myGameArea.keys[87]) {player.y--} //UP/W
			if (myGameArea.keys && myGameArea.keys[40] || myGameArea.keys && myGameArea.keys[83]) {player.y++} //DOWN/S
			last_press = ticks;
			myGameArea.clear()
				for(i = 0; i < active_map_piece.length; i++)
				{
				active_map_piece[i].update();
				}
			player.build.move_piece(player.x * 64 -50,player.y * 64 - 60);
			player.build.update()
		}
	}
	if(mode == CHARACTER_CREATION)
	{
		player.build.move_piece(SCREEN_WIDTH/2 ,SCREEN_HEIGHT/2 - 188)
		myGameArea.clear();
		for(i = 0;i < arrows.arrows.length;i++)
		{
			arrows.arrows[i].update();;
		}
		player.build.update();
	}

}

function check_array(achk,x,y)
{
	for(i = 0;i < achk.arrows.length;i++)
	{
		if(x < achk.arrows[i].x + achk.arrows[i].width && x > achk.arrows[i].x && y < achk.arrows[i].y + achk.arrows[i].height && y > achk.arrows[i].y)
		{
			return i;
		}
	
	}
}

function getMousePos(event)
{
	var x = event.x - myGameArea.canvas.offsetLeft;
	var y = event.y - myGameArea.canvas.offsetTop;
	if(mode == CHARACTER_CREATION)
	{
		var selected = check_array(arrows,x,y);
		if(selected == 4)
		{
			lower--;
			if(lower < 0)
			{
				lower = orc_lower.length - 1;
			}
			player.build.bottom.imagge = orc_lower[lower];
		}
		if(selected == 5)
		{
			lower++;
			if(lower == orc_lower.length)
			{
				lower = 0;
			}
			player.build.bottom.imagge = orc_lower[lower];
		}
	}
}

var myGameArea = {
    canvas : document.createElement("canvas"),
    start : function() {
        this.canvas.width = SCREEN_WIDTH;
        this.canvas.height = SCREEN_HEIGHT;
        this.context = this.canvas.getContext("2d");
		this.context.imageSmoothingEnabled = false;
        document.body.insertBefore(this.canvas, document.body.childNodes[0]);
        this.interval = setInterval(updateGameArea, TICK_SPEED);
		arrows = new arrow_group(SCREEN_WIDTH/2 - 128,SCREEN_HEIGHT/2 - 256,3,248,129);
		create_player(0,128,128);	
		mode = CHARACTER_CREATION;
		this.canvas.addEventListener("mousedown",getMousePos,false)
        window.addEventListener('keydown', function (e) {
            myGameArea.keys = (myGameArea.keys || []);
            myGameArea.keys[e.keyCode] = true;
        })
        window.addEventListener('keyup', function (e) {
            myGameArea.keys[e.keyCode] = false; 
        })
    },
    clear : function() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
}



function startGame() {
    myGameArea.start();
	//myGamePiece[1] = new component(30,30,"blue",100,200,false);
	//myGamePiece[2] = new component(30, 30, "red", 10, 300,false);
	//myGamePiece[3] = new component(30, 30, "red", 10, 300,false);
}

startGame();
</script>

</body>
</html>
